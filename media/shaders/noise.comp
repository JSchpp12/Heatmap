#version 450
//written by Jacob Schaupp
//based on work presented in Simplex Noise Demystified (SND)
//additionally based on thebookofshaders - simplex noise
//by Stefan Gustavson

layout (binding = 0, rgba8) uniform writeonly image2D outputImage;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

//precomputed values for skeded triangular grid
const vec4 triangleGridValues = vec4(0.211324865405187,
                        // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,
                        // 0.5*(sqrt(3.0)-1.0)
                        -0.577350269189626,
                        // -1.0 + 2.0 * C.x
                        0.024390243902439); 
                        // 1.0 / 41.0
const float in_modValue = 289; 

layout (push_constant) uniform constants{
    vec2 res;
    float scale; 
    float permute; 
} PushConstants; 

vec3 permute(vec3 inValue, float permuteValue){
    return mod(((inValue*permuteValue)+1)*inValue, in_modValue);
}

// calculate simplex noise at a given location
float simplexNoise(in vec2 compLoc) {
    //need to find corners of simplex grid
    vec2 loc = compLoc.xy / PushConstants.res.xy;  
    loc.x *= PushConstants.res.x / PushConstants.res.y; 
    loc *=  PushConstants.scale; 

    //first corner 
    vec2 li = floor(loc + dot(loc, triangleGridValues.yy)); 
    vec2 corner_0 = loc - li + dot(li, triangleGridValues.xx);
    //can use conditional rather than lookup table as presented in SND
    vec2 lii = (corner_0.x > corner_0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); 
    vec2 corner_1 = corner_0.xy + triangleGridValues.xx - lii; 
    vec2 corner_2 = corner_0.xy + triangleGridValues.zz; 

    li = mod(li, in_modValue); 
    vec3 permute_result = permute(permute(li.y + vec3(0.0, lii.y, 1.0)
        + li.x + vec3(0.0, lii.x, 1.0), PushConstants.permute), PushConstants.permute); 

    vec3 m = max(0.5 - vec3(
        dot(corner_0, corner_0), 
        dot(corner_1, corner_1), 
        dot(corner_2, corner_2)
    ), 0.0); 

    m = m*m; 
    m = m*m; 

    //gradient application
    //using 41 points mapped to diamond
    //ring size in this example is 17*17
    vec3 x = 2.0 * fract(permute_result * triangleGridValues.www) - 1.0; 
    vec3 h = abs(x) - 0.5; 
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox; 

    //TODO: might be able to improve this
    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt(a0*a0 + h*h);
    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);

    //final noise compute
    vec3 g = vec3(0.0); 
    g.x = a0.x * corner_0.x + h.x * corner_0.y; 
    g.yz = a0.yz * vec2(corner_1.x, corner_2.x) + h.yz * vec2(corner_1.y, corner_2.y);

    float raw = (130.0 * dot(m,g)) + 0.5; 
    return raw; 
}

void main(){
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy); 
    float hsv_angle = simplexNoise(texelCoord); 
    //angle, brightness, saturation
    vec3 hsv = vec3(hsv_angle, 1.0, 1.0);

    imageStore(outputImage, texelCoord, vec4(hsv, 1.0));
}